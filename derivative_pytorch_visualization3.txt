In [1]: import torch
   ...:

In [2]: x = (torch.rand(100) * 20) - 10  # 100 random numbers in range [-10, 10]
   ...:

In [3]: x
Out[3]:
tensor([ 8.9129, -4.2492,  8.5053, -5.7445, -6.6875,  3.2384,  1.0774,  8.3339,
         5.4437, -2.6297, -2.6834, -0.6255,  9.4321,  7.5014,  7.4780,  6.1594,
        -9.5960,  8.9394,  4.4040, -5.5959,  3.6199, -3.3817, -7.1815,  8.1757,
         0.7989,  3.2802,  9.9411, -8.1256,  4.6373, -7.7159, -1.9373, -1.6097,
        -9.6102,  9.4583, -3.8602, -1.4688,  9.8724,  6.4571, -7.2981, -0.3774,
        -6.5774, -5.2117,  7.0656,  6.6313, -0.0370,  7.4278, -8.4991,  6.8355,
         0.1490,  0.8830, -3.5225,  4.9194, -9.9386, -3.1591,  2.9888,  7.2409,
         9.3409, -1.2542,  8.0442, -2.9713, -7.0267, -3.3793, -9.2299, -5.7876,
         2.4433,  4.6784, -2.9546, -1.7706,  1.0631, -8.6931,  6.7018,  8.6947,
         6.2333,  7.8210,  6.9228,  4.2958,  0.5143,  4.5466, -3.9348,  8.8070,
        -6.1728, -9.4837,  7.8832,  7.6717, -6.3898,  3.1879,  3.0257,  1.4916,
        -9.9278,  7.7982,  9.3873, -7.8938, -2.3601, -5.5980, -5.3358,  4.5831,
        -7.3277, -6.7403, -0.7621,  5.2303])

In [4]: x.requires_grad_(True)
Out[4]:
tensor([ 8.9129, -4.2492,  8.5053, -5.7445, -6.6875,  3.2384,  1.0774,  8.3339,
         5.4437, -2.6297, -2.6834, -0.6255,  9.4321,  7.5014,  7.4780,  6.1594,
        -9.5960,  8.9394,  4.4040, -5.5959,  3.6199, -3.3817, -7.1815,  8.1757,
         0.7989,  3.2802,  9.9411, -8.1256,  4.6373, -7.7159, -1.9373, -1.6097,
        -9.6102,  9.4583, -3.8602, -1.4688,  9.8724,  6.4571, -7.2981, -0.3774,
        -6.5774, -5.2117,  7.0656,  6.6313, -0.0370,  7.4278, -8.4991,  6.8355,
         0.1490,  0.8830, -3.5225,  4.9194, -9.9386, -3.1591,  2.9888,  7.2409,
         9.3409, -1.2542,  8.0442, -2.9713, -7.0267, -3.3793, -9.2299, -5.7876,
         2.4433,  4.6784, -2.9546, -1.7706,  1.0631, -8.6931,  6.7018,  8.6947,
         6.2333,  7.8210,  6.9228,  4.2958,  0.5143,  4.5466, -3.9348,  8.8070,
        -6.1728, -9.4837,  7.8832,  7.6717, -6.3898,  3.1879,  3.0257,  1.4916,
        -9.9278,  7.7982,  9.3873, -7.8938, -2.3601, -5.5980, -5.3358,  4.5831,
        -7.3277, -6.7403, -0.7621,  5.2303], requires_grad=True)

In [5]: y = torch.sin(x)
   ...:

In [6]: y
Out[6]:
tensor([ 0.4898,  0.8946,  0.7953,  0.5130, -0.3934, -0.0967,  0.8807,  0.8870,
        -0.7443, -0.4898, -0.4424, -0.5855, -0.0073,  0.9385,  0.9302, -0.1235,
         0.1704,  0.4665, -0.9528,  0.6345, -0.4603,  0.2378, -0.7823,  0.9487,
         0.7166, -0.1382, -0.4937, -0.9633, -0.9972, -0.9905, -0.9336, -0.9992,
         0.1844, -0.0335,  0.6583, -0.9948, -0.4328,  0.1731, -0.8494, -0.3685,
        -0.2900,  0.8779,  0.7050,  0.3411, -0.0370,  0.9106, -0.7990,  0.5246,
         0.1485,  0.7726,  0.3717, -0.9787,  0.4915,  0.0175,  0.1522,  0.8179,
         0.0838, -0.9503,  0.9820, -0.1694, -0.6768,  0.2354, -0.1937,  0.4755,
         0.6429, -0.9994, -0.1859, -0.9801,  0.8739, -0.6681,  0.4065,  0.6670,
        -0.0499,  0.9995,  0.5969, -0.9145,  0.4919, -0.9863,  0.7126,  0.5792,
         0.1102,  0.0589,  0.9996,  0.9834, -0.1064, -0.0463,  0.1156,  0.9969,
         0.4821,  0.9984,  0.0375, -0.9992, -0.7043,  0.6328,  0.8119, -0.9917,
        -0.8647, -0.4413, -0.6904, -0.8689], grad_fn=<SinBackward0>)

In [7]: y.sum().backward()

In [8]:  x.grad
Out[8]:
tensor([-0.8718, -0.4468, -0.6062,  0.8584,  0.9194, -0.9953,  0.4736, -0.4617,
         0.6679, -0.8718, -0.8968,  0.8107, -1.0000,  0.3453,  0.3671,  0.9923,
        -0.9854, -0.8845, -0.3035,  0.7730, -0.8878, -0.9713,  0.6229, -0.3162,
         0.6975, -0.9904, -0.8696, -0.2683, -0.0750,  0.1376, -0.3584, -0.0389,
        -0.9829, -0.9994, -0.7527,  0.1018, -0.9015,  0.9849,  0.5277,  0.9296,
         0.9570,  0.4789,  0.7092,  0.9400,  0.9993,  0.4134, -0.6013,  0.8513,
         0.9889,  0.6349, -0.9283,  0.2055, -0.8709, -0.9998, -0.9884,  0.5754,
        -0.9965,  0.3113, -0.1891, -0.9855,  0.7361, -0.9719, -0.9811,  0.8797,
        -0.7659, -0.0340, -0.9826, -0.1984,  0.4861, -0.7441,  0.9137, -0.7451,
         0.9988,  0.0330,  0.8023, -0.4047,  0.8707, -0.1650, -0.7016, -0.8152,
         0.9939, -0.9983, -0.0292,  0.1813,  0.9943, -0.9989, -0.9933,  0.0791,
        -0.8761,  0.0558, -0.9993, -0.0398, -0.7099,  0.7743,  0.5838, -0.1289,
         0.5023,  0.8974,  0.7234,  0.4951])

In [9]: y_prime = x.grad
   ...:

In [10]: x.detach().numpy()
Out[10]:
array([ 8.912918  , -4.2492094 ,  8.505251  , -5.744542  , -6.6874847 ,
        3.2384167 ,  1.0774174 ,  8.333895  ,  5.4437456 , -2.6297379 ,
       -2.6833558 , -0.6255255 ,  9.43207   ,  7.501438  ,  7.4780483 ,
        6.159382  , -9.596044  ,  8.939442  ,  4.4040003 , -5.5958834 ,
        3.6198902 , -3.3816862 , -7.1815157 ,  8.175653  ,  0.79888344,
        3.280219  ,  9.941097  , -8.125597  ,  4.6373367 , -7.7159142 ,
       -1.9372978 , -1.6097469 , -9.610237  ,  9.45833   , -3.8602123 ,
       -1.4688349 ,  9.872364  ,  6.457142  , -7.298124  , -0.3774376 ,
       -6.577449  , -5.2117395 ,  7.0655727 ,  6.631283  , -0.03701591,
        7.4278393 , -8.499123  ,  6.835478  ,  0.14901924,  0.88295746,
       -3.522462  ,  4.9193745 , -9.938621  , -3.1590834 ,  2.9888287 ,
        7.2409077 ,  9.340872  , -1.2542429 ,  8.044222  , -2.9713259 ,
       -7.0266557 , -3.379271  , -9.229862  , -5.7876053 ,  2.4432983 ,
        4.678378  , -2.9545712 , -1.7705717 ,  1.0631199 , -8.693095  ,
        6.701807  ,  8.694654  ,  6.2332687 ,  7.820984  ,  6.922844  ,
        4.2957706 ,  0.51425457,  4.5465946 , -3.934784  ,  8.807013  ,
       -6.1727667 , -9.48372   ,  7.8832207 ,  7.6717186 , -6.389784  ,
        3.1878796 ,  3.025732  ,  1.4916029 , -9.927776  ,  7.798191  ,
        9.387262  , -7.893838  , -2.3601031 , -5.5979767 , -5.3357887 ,
        4.583091  , -7.3277035 , -6.7402515 , -0.7620506 ,  5.2302914 ],
      dtype=float32)

In [11]:

